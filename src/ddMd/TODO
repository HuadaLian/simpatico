Housekeeping:
------------

- Move DdMd::Simulation::computePairEnergies() and pairEnergies()
  to PairPotential class, modify PairEnergy(ies) analyzer classes.

- Remove DdMd::Simulation computeExternalEnergy() and externalEnergy()
  functions to ExternalEnergy (if not already there).

- Clean up PairEnergyAverage class (e.g., pairs_ class apears to be one pair,
  accumulator_ used as name for pointer, not derived from AverageAnalyzer).

Atom Sorting:
-------------

- Implement periodic sorting of atoms

Species
-------

- Introduce simple data structures to keep track of molecular species
  (of atoms per molecule and molecules per species)

- Modify configIo and trajectory formats to read and write this info

Exchanger:
----------

- Write separate algorithm for initial ghost exchange, to reduce memory 
  requirements See doc/notes/ddMd/initGhosts

- Add memory usage statistics, to measure which communication step (atom
  exchange or ghost exchange) uses the most memory

- Improve error checking of conditions that can lead to incomplete groups.
  Under what conditions can a group span two boundaries in the same direction ?
  Is there a bound to how far a ghost can move without causing a possible error ?

=======
Non-orthogonal boundaries:
--------------------------

- Generalize makeSnapShot and needsExchange methods in AtomStorage to
  allow for non-orthogonal boundaries (requires changes to Boundary)

- Modify calculation of distances between cells in construction of Offset
  array in DdMd::CellList. Perhaps move calculation to Boundary class

Buffer:
-------

- Allocate in bytes, remove atomCapacity and ghostCapacity 
  (see doc/notes/ddMd/Buffer)

- Make sure memory statistics include all usage, including setup

- Consider moving allocation of Buffer to Exchanger

AtomStorage:
------------

- Make sure memory statistics include all usage, including setup, so
  that the user has a better indication of when the ghost capacity 
  needs to be increased

Perturbation:
-------------

- Add perturbation class and class hierarchy for use with multi-system
  parallel simulations

Moving GroupStorage to Potential class:
---------------------------------------

- see doc/notes/ddMd/GroupStorage

- Make each GroupStorage a member of the associated potential

Single Processor Operation
--------------------------

- Modify Distributor, Collector, ConfigIo, and Exchanger classes to 
  work ifndef UTIL_MPI, continue with other classes, to enable single 
  processor operation with no MPI

Hybrid MD
---------

- Finish and test transactions in AtomStorage (in transactions branch)

- Add transactions to GroupStorage (in transactions branch)

