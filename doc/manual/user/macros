
\section user_options_macro How C++ Preprocessor Macros are Defined

Conditional compilation of each of optional feature of Simpatico is controlled by a C++ preprocessor macro. The name of the preprocessor macro associated with each feature is given in the above table. Blocks of code associated with each feature are surrounded with preprocessor lines of the form
\code
#ifdef MACRO
   // Code to be conditionally compiled.
#endif
\endcode
in which MACRO represents the name of the relevant preprocessor macro (e.g., UTIL_DEBUG).

Each C++ preprocessor macros is defined if and only if the makefile variable of the same name is defined is enabled in the relevant makefile fragment (i.e., in src/config.mk, src/util/config.mk, src/simp/config.mk, src/mcMd/config.mk or src/ddMd/config.mk).  For example, to define the C++ preprocessorer macro UTIL_DEBUG throughout the source code, and thus compile a debugging version with extra error checking, the makefile fragment src/util/config.mk must contain a line that defines "UTIL_DEBUG=1$. Conversely, to disable this feature, this definition must be commented out, by adding a hash ('#') at the beginning of the line.  

When the makefile variable associated with a feature is defined, the makefile system uses the "-D" compiler option to define the corresponding preprocessor macro.  For example, if the file src/util/config.mk contains a line defining UTIL_DEBUG=1, another part of the same file adds a string "-DUTIL_DEBUG" to the list of options that will be passed to the compiler, thus causing the C++ UTIL_DEBUG macro to be defined throughout the source code. The makefile block that conditionally adds a "-D" option to list of compiler options is always near the bottom of the makefile fragment that defines the associated makefile variable.  Each such block also contains code to add an associated file name suffix to any relevant libraries and executables. 
 
